library(shiny)
library(ggplot2)
health <- read.csv("../data/health_clean_data.csv", stringsAsFactors = FALSE)
plot_data <- read.csv("../data/ggplot_data.csv", stringsAsFactors = FALSE)
plot_wei_data <- read.csv("../data/ggplot_weighted_data.csv", stringsAsFactors = FALSE)
health$date_of_interest <- as.Date(health$date_of_interest)
plot_data$date <- as.Date(plot_data$date)
plot_wei_data$date <- as.Date(plot_wei_data$date)
MN_pop <- 1576876
BX_pop <- 1481409
QN_pop <- 2422938
SI_pop <- 493494
BK_pop <- 2712360
ui <- fluidPage(
# App title ----
titlePanel("Health Issue"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Select for the borough ----
selectInput(inputId = "borough",
label = "Choose a borough:",
choices = c("Manhattan", "Bronx", "Brooklyn", "Queens", "Staten Island", "All")),
selectInput(inputId = "weight",
label = "Whether the data is weighted by the population:",
choices = c("Unweighted", "Weighted"))
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Plot on Covid case count ----
plotOutput(outputId = "case_plot"),
# Output: Plot on hospitalization count ----
plotOutput(outputId = "hosp_plot"),
# Output: Plot on death count ----
plotOutput(outputId = "death_plot"),
# Output: Barplot on 2020 cumulative counts
plotOutput(outputId = "barplot_2020"),
# Output: Barplot on 2021 cumulative counts
plotOutput(outputId = "barplot_2021"),
# Output: Barplot on 2022 cumulative counts
plotOutput(outputId = "barplot_2022")
)
)
)
server <- function(input, output) {
data <- reactive({
res2020 <- apply(health[health$date_of_interest< "2021-01-01", -1],
2, sum)
sum_2020 <- data.frame(borough = rep(c("Bronx", "Brooklyn",
"Manhattan", "Queens",
"Staten Island"), 3),
total_count = res2020,
type = rep(c("Case", "Death",
"Hospitalized"), each = 5))
res2021 <- apply(health[health$date_of_interest < "2022-01-01"
& health$date_of_interest >= "2021-01-01",
-1], 2, sum)
sum_2021 <- data.frame(borough = rep(c("Bronx", "Brooklyn",
"Manhattan", "Queens",
"Staten Island"), 3),
total_count = res2021,
type = rep(c("Case", "Death",
"Hospitalized"), each = 5))
res2022 <- apply(health[health$date_of_interest>= "2022-01-01", -1],
2, sum)
sum_2022 <- data.frame(borough = rep(c("Bronx", "Brooklyn",
"Manhattan", "Queens",
"Staten Island"), 3),
total_count = res2022,
type = rep(c("Case", "Death",
"Hospitalized"), each = 5))
if ("Unweighted" %in% input$weight) {
final_data <- plot_data
bar_2020 <- sum_2020
bar_2021 <- sum_2021
bar_2022 <- sum_2022
}
if ("Weighted" %in% input$weight) {
final_data <- plot_wei_data
bar_2020 <- sum_2020
bar_2020$total_count <- bar_2020$total_count /
rep(c(BX_pop, BK_pop, MN_pop, QN_pop, SI_pop), 3)
bar_2021 <- sum_2021
bar_2021$total_count <- bar_2021$total_count /
rep(c(BX_pop, BK_pop, MN_pop, QN_pop, SI_pop), 3)
bar_2022 <- sum_2022
bar_2022$total_count <- bar_2022$total_count /
rep(c(BX_pop, BK_pop, MN_pop, QN_pop, SI_pop), 3)
}
if ( "Manhattan" %in% input$borough){
data = final_data[final_data$borough == "Manhattan", ]
bar_2020 = bar_2020[bar_2020$borough == "Manhattan", ]
bar_2021 = bar_2021[bar_2021$borough == "Manhattan", ]
bar_2022 = bar_2022[bar_2022$borough == "Manhattan", ]
data_list <- list(data, bar_2020, bar_2021, bar_2022)
return(data_list)
}
if ( "Bronx" %in% input$borough){
data = final_data[final_data$borough == "Bronx", ]
bar_2020 = bar_2020[bar_2020$borough == "Bronx", ]
bar_2021 = bar_2021[bar_2021$borough == "Bronx", ]
bar_2022 = bar_2022[bar_2022$borough == "Bronx", ]
data_list <- list(data, bar_2020, bar_2021, bar_2022)
return(data_list)
}
if ( "Brooklyn" %in% input$borough){
data = final_data[final_data$borough == "Brooklyn", ]
bar_2020 = bar_2020[bar_2020$borough == "Brooklyn", ]
bar_2021 = bar_2021[bar_2021$borough == "Brooklyn", ]
bar_2022 = bar_2022[bar_2022$borough == "Brooklyn", ]
data_list <- list(data, bar_2020, bar_2021, bar_2022)
return(data_list)
}
if ( "Queens" %in% input$borough){
data = final_data[final_data$borough == "Queens", ]
bar_2020 = bar_2020[bar_2020$borough == "Queens", ]
bar_2021 = bar_2021[bar_2021$borough == "Queens", ]
bar_2022 = bar_2022[bar_2022$borough == "Queens", ]
data_list <- list(data, bar_2020, bar_2021, bar_2022)
return(data_list)
}
if ( "Staten Island" %in% input$borough){
data = final_data[final_data$borough == "Staten Island", ]
bar_2020 = bar_2020[bar_2020$borough == "Staten Island", ]
bar_2021 = bar_2021[bar_2021$borough == "Staten Island", ]
bar_2022 = bar_2022[bar_2022$borough == "Staten Island", ]
data_list <- list(data, bar_2020, bar_2021, bar_2022)
return(data_list)
}
if ( "All" %in% input$borough) {
data = final_data
data_list <- list(data, bar_2020, bar_2021, bar_2022)
return(data_list)
}
})
output$case_plot <- renderPlot({
data_list = data()
ggplot(data = data_list[[1]], aes(x=date, y=case)) +
geom_line(aes(colour=borough))
})
output$hosp_plot <- renderPlot({
data_list = data()
ggplot(data = data_list[[1]], aes(x=date, y=hospitalized)) +
geom_line(aes(colour=borough))
})
output$death_plot <- renderPlot({
data_list = data()
ggplot(data = data_list[[1]], aes(x=date, y=death)) +
geom_line(aes(colour=borough))
})
output$barplot_2020 <- renderPlot({
data_list = data()
ggplot(data_list[[2]], aes(x = factor(borough), y = total_count,
fill = type, colour = type)) +
geom_bar(stat = "identity", position = "dodge")
})
output$barplot_2021 <- renderPlot({
data_list = data()
ggplot(data_list[[3]], aes(x = factor(borough), y = total_count,
fill = type, colour = type)) +
geom_bar(stat = "identity", position = "dodge")
})
output$barplot_2022 <- renderPlot({
data_list = data()
ggplot(data_list[[4]], aes(x = factor(borough), y = total_count,
fill = type, colour = type)) +
geom_bar(stat = "identity", position = "dodge")
})
}
shinyApp(ui, server)
